From 3426d7bcf98fee15c239ea2b3d815c613df82efe Mon Sep 17 00:00:00 2001
From: Marvin Scholz <epirat07@gmail.com>
Date: Wed, 19 Jun 2019 13:32:58 +0200
Subject: [PATCH] contrib: Do not pass debug/optim flags to meson
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This fixes the meson underscore prefix test, which misbehaves
when -g is passed, as it would detect the debug string without
underscore first and incorrectly report that no underscore
prefix for symbols is used.

Fixes build issues with dav1d, which relies on the underscore
prefix check.

See: https://github.com/mesonbuild/meson/issues/5482
Signed-off-by: Hugo Beauz√©e-Luyssen <hugo@beauzee.fr>
---
 contrib/src/main.mak | 95 ++++++++++++++++++--------------------------
 1 file changed, 38 insertions(+), 57 deletions(-)

diff --git a/contrib/src/main.mak b/contrib/src/main.mak
index cbd7a2e..3b6ef6d 100644
--- a/contrib/src/main.mak
+++ b/contrib/src/main.mak
@@ -165,16 +165,14 @@ cppcheck = $(shell $(CC) $(CFLAGS) -E -dM - < /dev/null | grep -E $(1))
 
 EXTRA_CFLAGS += -I$(PREFIX)/include
 CPPFLAGS := $(CPPFLAGS) $(EXTRA_CFLAGS)
-CFLAGS := $(CFLAGS) $(EXTRA_CFLAGS) -g
-CXXFLAGS := $(CXXFLAGS) $(EXTRA_CFLAGS) $(EXTRA_CXXFLAGS) -g
+CFLAGS := $(CFLAGS) $(EXTRA_CFLAGS)
+CXXFLAGS := $(CXXFLAGS) $(EXTRA_CFLAGS) $(EXTRA_CXXFLAGS)
 LDFLAGS := $(LDFLAGS) -L$(PREFIX)/lib $(EXTRA_LDFLAGS)
 
 ifndef WITH_OPTIMIZATION
-CFLAGS := $(CFLAGS) -O0
-CXXFLAGS := $(CXXFLAGS) -O0
+DBGOPTIMFLAGS = -g -O0
 else
-CFLAGS := $(CFLAGS) -O2
-CXXFLAGS := $(CXXFLAGS) -O2
+DBGOPTIMFLAGS = -g -O2
 endif
 
 # Do not export those! Use HOSTVARS.
@@ -289,21 +287,28 @@ HOSTTOOLS := \
 	CC="$(CC)" CXX="$(CXX)" LD="$(LD)" \
 	AR="$(AR)" CCAS="$(CCAS)" RANLIB="$(RANLIB)" STRIP="$(STRIP)" \
 	PATH="$(PREFIX)/bin:$(PATH)"
-HOSTVARS := \
+HOSTVARS := $(HOSTTOOLS) \
 	CPPFLAGS="$(CPPFLAGS)" \
-	CFLAGS="$(CFLAGS)" \
-	CXXFLAGS="$(CXXFLAGS)" \
+	CFLAGS="$(CFLAGS) $(DBGOPTIMFLAGS)" \
+	CXXFLAGS="$(CXXFLAGS) $(DBGOPTIMFLAGS)" \
 	LDFLAGS="$(LDFLAGS)"
 HOSTVARS_PIC := $(HOSTTOOLS) \
 	CPPFLAGS="$(CPPFLAGS) $(PIC)" \
-	CFLAGS="$(CFLAGS) $(PIC)" \
-	CXXFLAGS="$(CXXFLAGS) $(PIC)" \
+	CFLAGS="$(CFLAGS) $(DBGOPTIMFLAGS) $(PIC)" \
+	CXXFLAGS="$(CXXFLAGS) $(DBGOPTIMFLAGS) $(PIC)" \
 	LDFLAGS="$(LDFLAGS)"
 
-# Keep a version of HOSTVARS without the tools, since meson requires the
-# tools variables to point to the native ones
-HOSTVARS_MESON := $(HOSTVARS)
-HOSTVARS := $(HOSTTOOLS) $(HOSTVARS)
+# For cross-compilation with meson, do not set compiler and flags
+# in HOSTVARS as meson will always use them for the BUILD machine compiler!
+ifdef HAVE_CROSS_COMPILE
+HOSTVARS_MESON := PATH="$(PREFIX)/bin:$(PATH)"
+else
+HOSTVARS_MESON := $(HOSTTOOLS) \
+	CPPFLAGS="$(CPPFLAGS)" \
+	CFLAGS="$(CFLAGS)" \
+	CXXFLAGS="$(CXXFLAGS)" \
+	LDFLAGS="$(LDFLAGS)"
+endif
 
 download_git = \
 	rm -Rf -- "$(@:.tar.xz=)" && \
@@ -528,54 +533,30 @@ ifdef HAVE_CROSS_COMPILE
 endif
 
 crossfile.meson:
-	$(RM) $@
-	echo "[binaries]" >> $@
-	echo "c = '$(CC)'" >> $@
-	echo "cpp = '$(CXX)'" >> $@
-	echo "ar = '$(AR)'" >> $@
-	echo "strip = '$(STRIP)'" >> $@
-	echo "pkgconfig = '$(PKG_CONFIG)'" >> $@
-	echo "windres = '$(WINDRES)'" >> $@
-	echo "[properties]" >> $@
-	echo "needs_exe_wrapper = true" >> $@
-ifdef HAVE_CROSS_COMPILE
-	echo "cpp_args = [ '-I$(PREFIX)/include' ]" >> $@
-	echo "cpp_link_args = [ '-L$(PREFIX)/lib' ]" >> $@
-ifdef HAVE_DARWIN_OS
-ifdef HAVE_IOS
-ifdef HAVE_TVOS
-	echo "c_args = ['-I$(PREFIX)/include', '-isysroot', '$(IOS_SDK)', '-mtvos-version-min=10.2', '-arch', '$(PLATFORM_SHORT_ARCH)', '-fembed-bitcode']" >> $@
-	echo "c_link_args = ['-L$(PREFIX)/lib', '-isysroot', '$(IOS_SDK)', '-arch', '$(PLATFORM_SHORT_ARCH)', '-fembed-bitcode']" >> $@
-else
-	echo "c_args = ['-I$(PREFIX)/include', '-isysroot', '$(IOS_SDK)', '-miphoneos-version-min=8.4', '-arch', '$(PLATFORM_SHORT_ARCH)']" >> $@
-	echo "c_link_args = ['-L$(PREFIX)/lib', '-isysroot', '$(IOS_SDK)', '-arch', '$(PLATFORM_SHORT_ARCH)']" >> $@
-endif
-endif
-ifdef HAVE_MACOSX
-	echo "c_args = ['-I$(PREFIX)/include', '-isysroot', '$(MACOSX_SDK)', '-mmacosx-version-min=10.10', '-arch', '$(ARCH)']" >> $@
-	echo "c_link_args = ['-L$(PREFIX)/lib', '-isysroot', '$(MACOSX_SDK)', '-arch', '$(ARCH)']" >> $@
-endif
-else
-	echo "c_args = [ '-I$(PREFIX)/include' ]" >> $@
-	echo "c_link_args = [ '-L$(PREFIX)/lib' ]" >> $@
-endif
-	echo "[host_machine]" >> $@
+	MESON_SYSTEM_NAME =
 ifdef HAVE_WIN32
-	echo "system = 'windows'" >> $@
+	MESON_SYSTEM_NAME = windows
 else
 ifdef HAVE_DARWIN_OS
-	echo "system = 'darwin'" >> $@
+	MESON_SYSTEM_NAME = darwin
 else
 ifdef HAVE_LINUX
 	# android has also system = linux and defines HAVE_LINUX
-	echo "system = 'linux'" >> $@
-endif
-endif
-endif
-	echo "cpu_family = '$(subst i386,x86,$(ARCH))'" >> $@
-	echo "cpu = '`echo $(HOST) | cut -d - -f 1`'" >> $@
-	echo "endian = 'little'" >> $@
-endif
+	MESON_SYSTEM_NAME = linux
+endif ;# HAVE_LINUX
+endif ;# HAVE_DARWIN_OS
+endif ;# HAVE_WIN32
+	$(HOSTTOOLS) \
+	CPPFLAGS="$(CPPFLAGS)" \
+	CFLAGS="$(CFLAGS)" \
+	CXXFLAGS="$(CXXFLAGS)" \
+	LDFLAGS="$(LDFLAGS)" \
+	WINDRES="$(WINDRES)" \
+	PKG_CONFIG="$(PKG_CONFIG)" \
+	HOST_SYSTEM="$(MESON_SYSTEM_NAME)" \
+	HOST_ARCH="$(subst i386,x86,$(ARCH))" \
+	HOST="$(HOST)" \
+	$(SRC)/gen-meson-crossfile.py $@
 
 # Default pattern rules
 .sum-%: $(SRC)/%/SHA512SUMS
-- 
2.22.0

